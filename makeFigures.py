# -*- coding: utf-8 -*-
"""
Created on Thu Feb  6 09:46:15 2020

@author: Tiago
"""
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import csv
from rdkit import Chem
from rdkit.Chem import Crippen
from rdkit.Chem import Descriptors as desc

colors = ['#ff7f0e', '#1f77b4', '#d62728', '#2ca02c', '#9467bd']  # orange, blue, green, red, purple
           
def properties_violin(filepaths,labels): # acrecentar mais propriedades (se n√£o houver, calcular!)
    
    properties = []
      
    for i,fname in enumerate(filepaths):
        with open(filepaths[i], 'r') as f:
            reader = csv.reader(f)
        
            it = iter(reader)
#            next(it, None)  # skip first item.    
            for row in it:
                    properties.append([labels[i],'IC50 for JAK2',float(row[1])])   
                    
                    try:
                        mol = Chem.MolFromSmiles(row[0])
                        x, y = desc.MolWt(mol), Crippen.MolLogP(mol)
                        properties.append([labels[i],'Molecular weight',x])
                        properties.append([labels[i],'logP',y])
                    except: 
                        print("Non-Canonical SMILES: " + row[0])
                    
    df = pd.DataFrame(properties, columns=['Sets', 'Property', 'Value'])
    return df

def properties_mw_logp(filepaths): 
    
    properties = []
      
    for i,fname in enumerate(filepaths):
        with open(filepaths[i], 'r') as f:
            reader = csv.reader(f)
        
            it = iter(reader)
            if not ("generated" in fname):
                for row in it:
                    try:
                        properties.append([float(row[2]),float(row[3]),i])
                    except:
                        print("")
            else:
                for row in it:
                    try:
                        mol = Chem.MolFromSmiles(row[0])
                        x, y = desc.MolWt(mol), Crippen.MolLogP(mol)
                        properties.append([x,y,i])
                    except: 
                        print("Non-Canonical SMILES: " + row[0])

    df = pd.DataFrame(properties[2000:2355], columns=['MW', 'logP', 'Label'])
    return df


def violin_plot():
    """ 
    violin plot for the physicochemical properties comparison.
    A: molecules generated by pre-trained model v.s. Chembl set.
    """
    plt.figure(figsize=(6, 4))
    
    sns.set(style="white", palette="pastel", color_codes=True)
    df = properties_violin(['data/data_50_len100.smi','data/generated.smi'], ['Chembl Dataset', 'Fine-tuned dataset'])
    sns.violinplot(x='Property', y='Value', hue='Sets', data=df, linewidth=1, split=True, bw=1)
    sns.despine(left=True)
    plt.ylim([-3, 15])
    plt.xlabel('Structural Properties')
    

def mw_logp_plot():  
    """
    Chemical space comparison based on logP ~ MW
    """
    fig = plt.figure(figsize=(12, 12))
    lab = ['Chembl Dataset', 'Fine-tuned dataset']
    ax1 = fig.add_subplot(221)
    df = properties_mw_logp(['data/tyk_clean.csv', 'data/generated.smi'])

    group0, group1 = df[df.Label == 0], df[df.Label== 1]
    ax1.scatter(group0.MW, group0.logP, s=10, marker='o', label=lab[0], c='', edgecolor=colors[1])
    ax1.scatter(group1.MW, group1.logP, s=10, marker='o', label=lab[1], c='', edgecolor=colors[3])
    ax1.set(ylabel='LogP', xlabel='Molecular Weight')
    ax1.legend(loc='lower right')

    
def main():
    """
    Main routine
    """
              
    violin_plot()
    
    mw_logp_plot()

if __name__ == '__main__':
    main()